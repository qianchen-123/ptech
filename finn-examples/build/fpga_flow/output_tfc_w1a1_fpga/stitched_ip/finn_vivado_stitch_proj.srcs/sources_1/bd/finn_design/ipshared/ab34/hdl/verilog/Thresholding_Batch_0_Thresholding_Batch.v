// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Thresholding_Batch_0_Thresholding_Batch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_TDATA,
        in_V_V_TVALID,
        in_V_V_TREADY,
        out_V_V_TDATA,
        out_V_V_TVALID,
        out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [391:0] in_V_V_TDATA;
input   in_V_V_TVALID;
output   in_V_V_TREADY;
output  [55:0] out_V_V_TDATA;
output   out_V_V_TVALID;
input   out_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_TREADY;
reg out_V_V_TVALID;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] threshs_m_thresholds_48_address0;
reg    threshs_m_thresholds_48_ce0;
wire   [7:0] threshs_m_thresholds_48_q0;
wire   [3:0] threshs_m_thresholds_47_address0;
reg    threshs_m_thresholds_47_ce0;
wire   [7:0] threshs_m_thresholds_47_q0;
wire   [3:0] threshs_m_thresholds_36_address0;
reg    threshs_m_thresholds_36_ce0;
wire   [7:0] threshs_m_thresholds_36_q0;
wire   [3:0] threshs_m_thresholds_25_address0;
reg    threshs_m_thresholds_25_ce0;
wire   [7:0] threshs_m_thresholds_25_q0;
wire   [3:0] threshs_m_thresholds_14_address0;
reg    threshs_m_thresholds_14_ce0;
wire   [7:0] threshs_m_thresholds_14_q0;
wire   [3:0] threshs_m_thresholds_4_address0;
reg    threshs_m_thresholds_4_ce0;
wire   [7:0] threshs_m_thresholds_4_q0;
wire   [3:0] threshs_m_thresholds_3_address0;
reg    threshs_m_thresholds_3_ce0;
wire   [7:0] threshs_m_thresholds_3_q0;
wire   [3:0] threshs_m_thresholds_2_address0;
reg    threshs_m_thresholds_2_ce0;
wire   [7:0] threshs_m_thresholds_2_q0;
wire   [3:0] threshs_m_thresholds_1_address0;
reg    threshs_m_thresholds_1_ce0;
wire   [7:0] threshs_m_thresholds_1_q0;
wire   [3:0] threshs_m_thresholds_address0;
reg    threshs_m_thresholds_ce0;
wire   [7:0] threshs_m_thresholds_q0;
wire   [3:0] threshs_m_thresholds_46_address0;
reg    threshs_m_thresholds_46_ce0;
wire   [7:0] threshs_m_thresholds_46_q0;
wire   [3:0] threshs_m_thresholds_45_address0;
reg    threshs_m_thresholds_45_ce0;
wire   [7:0] threshs_m_thresholds_45_q0;
wire   [3:0] threshs_m_thresholds_44_address0;
reg    threshs_m_thresholds_44_ce0;
wire   [7:0] threshs_m_thresholds_44_q0;
wire   [3:0] threshs_m_thresholds_43_address0;
reg    threshs_m_thresholds_43_ce0;
wire   [7:0] threshs_m_thresholds_43_q0;
wire   [3:0] threshs_m_thresholds_42_address0;
reg    threshs_m_thresholds_42_ce0;
wire   [7:0] threshs_m_thresholds_42_q0;
wire   [3:0] threshs_m_thresholds_41_address0;
reg    threshs_m_thresholds_41_ce0;
wire   [7:0] threshs_m_thresholds_41_q0;
wire   [3:0] threshs_m_thresholds_40_address0;
reg    threshs_m_thresholds_40_ce0;
wire   [7:0] threshs_m_thresholds_40_q0;
wire   [3:0] threshs_m_thresholds_39_address0;
reg    threshs_m_thresholds_39_ce0;
wire   [7:0] threshs_m_thresholds_39_q0;
wire   [3:0] threshs_m_thresholds_38_address0;
reg    threshs_m_thresholds_38_ce0;
wire   [7:0] threshs_m_thresholds_38_q0;
wire   [3:0] threshs_m_thresholds_37_address0;
reg    threshs_m_thresholds_37_ce0;
wire   [7:0] threshs_m_thresholds_37_q0;
wire   [3:0] threshs_m_thresholds_35_address0;
reg    threshs_m_thresholds_35_ce0;
wire   [7:0] threshs_m_thresholds_35_q0;
wire   [3:0] threshs_m_thresholds_34_address0;
reg    threshs_m_thresholds_34_ce0;
wire   [7:0] threshs_m_thresholds_34_q0;
wire   [3:0] threshs_m_thresholds_33_address0;
reg    threshs_m_thresholds_33_ce0;
wire   [7:0] threshs_m_thresholds_33_q0;
wire   [3:0] threshs_m_thresholds_32_address0;
reg    threshs_m_thresholds_32_ce0;
wire   [7:0] threshs_m_thresholds_32_q0;
wire   [3:0] threshs_m_thresholds_31_address0;
reg    threshs_m_thresholds_31_ce0;
wire   [7:0] threshs_m_thresholds_31_q0;
wire   [3:0] threshs_m_thresholds_30_address0;
reg    threshs_m_thresholds_30_ce0;
wire   [7:0] threshs_m_thresholds_30_q0;
wire   [3:0] threshs_m_thresholds_29_address0;
reg    threshs_m_thresholds_29_ce0;
wire   [7:0] threshs_m_thresholds_29_q0;
wire   [3:0] threshs_m_thresholds_28_address0;
reg    threshs_m_thresholds_28_ce0;
wire   [7:0] threshs_m_thresholds_28_q0;
wire   [3:0] threshs_m_thresholds_27_address0;
reg    threshs_m_thresholds_27_ce0;
wire   [7:0] threshs_m_thresholds_27_q0;
wire   [3:0] threshs_m_thresholds_26_address0;
reg    threshs_m_thresholds_26_ce0;
wire   [7:0] threshs_m_thresholds_26_q0;
wire   [3:0] threshs_m_thresholds_24_address0;
reg    threshs_m_thresholds_24_ce0;
wire   [7:0] threshs_m_thresholds_24_q0;
wire   [3:0] threshs_m_thresholds_23_address0;
reg    threshs_m_thresholds_23_ce0;
wire   [7:0] threshs_m_thresholds_23_q0;
wire   [3:0] threshs_m_thresholds_22_address0;
reg    threshs_m_thresholds_22_ce0;
wire   [7:0] threshs_m_thresholds_22_q0;
wire   [3:0] threshs_m_thresholds_21_address0;
reg    threshs_m_thresholds_21_ce0;
wire   [7:0] threshs_m_thresholds_21_q0;
wire   [3:0] threshs_m_thresholds_20_address0;
reg    threshs_m_thresholds_20_ce0;
wire   [7:0] threshs_m_thresholds_20_q0;
wire   [3:0] threshs_m_thresholds_19_address0;
reg    threshs_m_thresholds_19_ce0;
wire   [7:0] threshs_m_thresholds_19_q0;
wire   [3:0] threshs_m_thresholds_18_address0;
reg    threshs_m_thresholds_18_ce0;
wire   [7:0] threshs_m_thresholds_18_q0;
wire   [3:0] threshs_m_thresholds_17_address0;
reg    threshs_m_thresholds_17_ce0;
wire   [7:0] threshs_m_thresholds_17_q0;
wire   [3:0] threshs_m_thresholds_16_address0;
reg    threshs_m_thresholds_16_ce0;
wire   [7:0] threshs_m_thresholds_16_q0;
wire   [3:0] threshs_m_thresholds_15_address0;
reg    threshs_m_thresholds_15_ce0;
wire   [7:0] threshs_m_thresholds_15_q0;
wire   [3:0] threshs_m_thresholds_13_address0;
reg    threshs_m_thresholds_13_ce0;
wire   [7:0] threshs_m_thresholds_13_q0;
wire   [3:0] threshs_m_thresholds_12_address0;
reg    threshs_m_thresholds_12_ce0;
wire   [7:0] threshs_m_thresholds_12_q0;
wire   [3:0] threshs_m_thresholds_11_address0;
reg    threshs_m_thresholds_11_ce0;
wire   [7:0] threshs_m_thresholds_11_q0;
wire   [3:0] threshs_m_thresholds_10_address0;
reg    threshs_m_thresholds_10_ce0;
wire   [7:0] threshs_m_thresholds_10_q0;
wire   [3:0] threshs_m_thresholds_9_address0;
reg    threshs_m_thresholds_9_ce0;
wire   [7:0] threshs_m_thresholds_9_q0;
wire   [3:0] threshs_m_thresholds_8_address0;
reg    threshs_m_thresholds_8_ce0;
wire   [7:0] threshs_m_thresholds_8_q0;
wire   [3:0] threshs_m_thresholds_7_address0;
reg    threshs_m_thresholds_7_ce0;
wire   [7:0] threshs_m_thresholds_7_q0;
wire   [3:0] threshs_m_thresholds_6_address0;
reg    threshs_m_thresholds_6_ce0;
wire   [7:0] threshs_m_thresholds_6_q0;
wire   [3:0] threshs_m_thresholds_5_address0;
reg    threshs_m_thresholds_5_ce0;
wire   [7:0] threshs_m_thresholds_5_q0;
reg    in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln266_fu_1014_p2;
reg    out_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln266_reg_2229;
reg   [31:0] nf_assign_reg_992;
reg   [4:0] i_0_reg_1003;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_fu_1020_p2;
wire   [7:0] trunc_ln647_fu_1026_p1;
reg   [7:0] trunc_ln647_reg_2238;
reg   [7:0] arg_V_read_assign_1_reg_2248;
reg   [7:0] arg_V_read_assign_2_reg_2258;
reg   [7:0] arg_V_read_assign_3_reg_2268;
reg   [7:0] arg_V_read_assign_4_reg_2278;
reg   [7:0] arg_V_read_assign_5_reg_2288;
reg   [7:0] arg_V_read_assign_6_reg_2298;
reg   [7:0] arg_V_read_assign_7_reg_2308;
reg   [7:0] arg_V_read_assign_8_reg_2318;
reg   [7:0] arg_V_read_assign_9_reg_2328;
reg   [7:0] arg_V_read_assign_s_reg_2338;
reg   [7:0] arg_V_read_assign_10_reg_2348;
reg   [7:0] arg_V_read_assign_11_reg_2358;
reg   [7:0] arg_V_read_assign_12_reg_2368;
reg   [7:0] arg_V_read_assign_13_reg_2378;
reg   [7:0] arg_V_read_assign_14_reg_2388;
reg   [7:0] arg_V_read_assign_15_reg_2398;
reg   [7:0] arg_V_read_assign_16_reg_2408;
reg   [7:0] arg_V_read_assign_17_reg_2418;
reg   [7:0] arg_V_read_assign_18_reg_2428;
reg   [7:0] arg_V_read_assign_19_reg_2438;
reg   [7:0] arg_V_read_assign_20_reg_2448;
reg   [7:0] arg_V_read_assign_21_reg_2458;
reg   [7:0] arg_V_read_assign_22_reg_2468;
reg   [7:0] arg_V_read_assign_23_reg_2478;
reg   [7:0] arg_V_read_assign_24_reg_2488;
reg   [7:0] arg_V_read_assign_25_reg_2498;
reg   [7:0] arg_V_read_assign_26_reg_2508;
reg   [7:0] arg_V_read_assign_27_reg_2518;
reg   [7:0] arg_V_read_assign_28_reg_2528;
reg   [7:0] arg_V_read_assign_29_reg_2538;
reg   [7:0] arg_V_read_assign_30_reg_2548;
reg   [7:0] arg_V_read_assign_31_reg_2558;
reg   [7:0] arg_V_read_assign_32_reg_2568;
reg   [7:0] arg_V_read_assign_33_reg_2578;
reg   [7:0] arg_V_read_assign_34_reg_2588;
reg   [7:0] arg_V_read_assign_35_reg_2598;
reg   [7:0] arg_V_read_assign_36_reg_2608;
reg   [7:0] arg_V_read_assign_37_reg_2618;
reg   [7:0] arg_V_read_assign_38_reg_2628;
reg   [7:0] arg_V_read_assign_39_reg_2638;
reg   [7:0] arg_V_read_assign_40_reg_2648;
reg   [7:0] arg_V_read_assign_41_reg_2658;
reg   [7:0] arg_V_read_assign_42_reg_2668;
reg   [7:0] arg_V_read_assign_43_reg_2678;
reg   [7:0] arg_V_read_assign_44_reg_2688;
reg   [7:0] arg_V_read_assign_45_reg_2698;
reg   [7:0] arg_V_read_assign_46_reg_2708;
reg   [7:0] arg_V_read_assign_47_reg_2718;
wire   [31:0] select_ln280_fu_1575_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln186_fu_1030_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] nf_fu_1563_p2;
wire   [0:0] icmp_ln280_fu_1569_p2;
wire   [0:0] icmp_ln899_fu_1583_p2;
wire   [0:0] icmp_ln899_1_fu_1594_p2;
wire   [0:0] icmp_ln899_2_fu_1605_p2;
wire   [0:0] icmp_ln899_3_fu_1616_p2;
wire   [0:0] icmp_ln899_4_fu_1627_p2;
wire   [0:0] icmp_ln899_5_fu_1638_p2;
wire   [0:0] icmp_ln899_6_fu_1649_p2;
wire   [0:0] icmp_ln899_7_fu_1660_p2;
wire   [0:0] icmp_ln899_8_fu_1671_p2;
wire   [0:0] icmp_ln899_9_fu_1682_p2;
wire   [0:0] icmp_ln899_10_fu_1693_p2;
wire   [0:0] icmp_ln899_11_fu_1704_p2;
wire   [0:0] icmp_ln899_12_fu_1715_p2;
wire   [0:0] icmp_ln899_13_fu_1726_p2;
wire   [0:0] icmp_ln899_14_fu_1737_p2;
wire   [0:0] icmp_ln899_15_fu_1748_p2;
wire   [0:0] icmp_ln899_16_fu_1759_p2;
wire   [0:0] icmp_ln899_17_fu_1770_p2;
wire   [0:0] icmp_ln899_18_fu_1781_p2;
wire   [0:0] icmp_ln899_19_fu_1792_p2;
wire   [0:0] icmp_ln899_20_fu_1803_p2;
wire   [0:0] icmp_ln899_21_fu_1814_p2;
wire   [0:0] icmp_ln899_22_fu_1825_p2;
wire   [0:0] icmp_ln899_23_fu_1836_p2;
wire   [0:0] icmp_ln899_24_fu_1847_p2;
wire   [0:0] icmp_ln899_25_fu_1858_p2;
wire   [0:0] icmp_ln899_26_fu_1869_p2;
wire   [0:0] icmp_ln899_27_fu_1880_p2;
wire   [0:0] icmp_ln899_28_fu_1891_p2;
wire   [0:0] icmp_ln899_29_fu_1902_p2;
wire   [0:0] icmp_ln899_30_fu_1913_p2;
wire   [0:0] icmp_ln899_31_fu_1924_p2;
wire   [0:0] icmp_ln899_32_fu_1935_p2;
wire   [0:0] icmp_ln899_33_fu_1946_p2;
wire   [0:0] icmp_ln899_34_fu_1957_p2;
wire   [0:0] icmp_ln899_35_fu_1968_p2;
wire   [0:0] icmp_ln899_36_fu_1979_p2;
wire   [0:0] icmp_ln899_37_fu_1990_p2;
wire   [0:0] icmp_ln899_38_fu_2001_p2;
wire   [0:0] icmp_ln899_39_fu_2012_p2;
wire   [0:0] icmp_ln899_40_fu_2023_p2;
wire   [0:0] icmp_ln899_41_fu_2034_p2;
wire   [0:0] icmp_ln899_42_fu_2045_p2;
wire   [0:0] icmp_ln899_43_fu_2056_p2;
wire   [0:0] icmp_ln899_44_fu_2067_p2;
wire   [0:0] icmp_ln899_45_fu_2078_p2;
wire   [0:0] icmp_ln899_46_fu_2089_p2;
wire   [0:0] icmp_ln899_47_fu_2100_p2;
wire   [0:0] icmp_ln899_48_fu_2111_p2;
wire   [0:0] xor_ln899_48_fu_2116_p2;
wire   [0:0] xor_ln899_47_fu_2105_p2;
wire   [0:0] xor_ln899_46_fu_2094_p2;
wire   [0:0] xor_ln899_45_fu_2083_p2;
wire   [0:0] xor_ln899_44_fu_2072_p2;
wire   [0:0] xor_ln899_43_fu_2061_p2;
wire   [0:0] xor_ln899_42_fu_2050_p2;
wire   [0:0] xor_ln899_41_fu_2039_p2;
wire   [0:0] xor_ln899_40_fu_2028_p2;
wire   [0:0] xor_ln899_39_fu_2017_p2;
wire   [0:0] xor_ln899_38_fu_2006_p2;
wire   [0:0] xor_ln899_37_fu_1995_p2;
wire   [0:0] xor_ln899_36_fu_1984_p2;
wire   [0:0] xor_ln899_35_fu_1973_p2;
wire   [0:0] xor_ln899_34_fu_1962_p2;
wire   [0:0] xor_ln899_33_fu_1951_p2;
wire   [0:0] xor_ln899_32_fu_1940_p2;
wire   [0:0] xor_ln899_31_fu_1929_p2;
wire   [0:0] xor_ln899_30_fu_1918_p2;
wire   [0:0] xor_ln899_29_fu_1907_p2;
wire   [0:0] xor_ln899_28_fu_1896_p2;
wire   [0:0] xor_ln899_27_fu_1885_p2;
wire   [0:0] xor_ln899_26_fu_1874_p2;
wire   [0:0] xor_ln899_25_fu_1863_p2;
wire   [0:0] xor_ln899_24_fu_1852_p2;
wire   [0:0] xor_ln899_23_fu_1841_p2;
wire   [0:0] xor_ln899_22_fu_1830_p2;
wire   [0:0] xor_ln899_21_fu_1819_p2;
wire   [0:0] xor_ln899_20_fu_1808_p2;
wire   [0:0] xor_ln899_19_fu_1797_p2;
wire   [0:0] xor_ln899_18_fu_1786_p2;
wire   [0:0] xor_ln899_17_fu_1775_p2;
wire   [0:0] xor_ln899_16_fu_1764_p2;
wire   [0:0] xor_ln899_15_fu_1753_p2;
wire   [0:0] xor_ln899_14_fu_1742_p2;
wire   [0:0] xor_ln899_13_fu_1731_p2;
wire   [0:0] xor_ln899_12_fu_1720_p2;
wire   [0:0] xor_ln899_11_fu_1709_p2;
wire   [0:0] xor_ln899_10_fu_1698_p2;
wire   [0:0] xor_ln899_9_fu_1687_p2;
wire   [0:0] xor_ln899_8_fu_1676_p2;
wire   [0:0] xor_ln899_7_fu_1665_p2;
wire   [0:0] xor_ln899_6_fu_1654_p2;
wire   [0:0] xor_ln899_5_fu_1643_p2;
wire   [0:0] xor_ln899_4_fu_1632_p2;
wire   [0:0] xor_ln899_3_fu_1621_p2;
wire   [0:0] xor_ln899_2_fu_1610_p2;
wire   [0:0] xor_ln899_1_fu_1599_p2;
wire   [0:0] xor_ln899_fu_1588_p2;
wire   [48:0] tmp_V_fu_2122_p50;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_48_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_48_address0),
    .ce0(threshs_m_thresholds_48_ce0),
    .q0(threshs_m_thresholds_48_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_47_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_47_address0),
    .ce0(threshs_m_thresholds_47_ce0),
    .q0(threshs_m_thresholds_47_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_36_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_36_address0),
    .ce0(threshs_m_thresholds_36_ce0),
    .q0(threshs_m_thresholds_36_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_25_address0),
    .ce0(threshs_m_thresholds_25_ce0),
    .q0(threshs_m_thresholds_25_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_14_address0),
    .ce0(threshs_m_thresholds_14_ce0),
    .q0(threshs_m_thresholds_14_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_4_address0),
    .ce0(threshs_m_thresholds_4_ce0),
    .q0(threshs_m_thresholds_4_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_3_address0),
    .ce0(threshs_m_thresholds_3_ce0),
    .q0(threshs_m_thresholds_3_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_2_address0),
    .ce0(threshs_m_thresholds_2_ce0),
    .q0(threshs_m_thresholds_2_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_1_address0),
    .ce0(threshs_m_thresholds_1_ce0),
    .q0(threshs_m_thresholds_1_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_address0),
    .ce0(threshs_m_thresholds_ce0),
    .q0(threshs_m_thresholds_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_46_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_46_address0),
    .ce0(threshs_m_thresholds_46_ce0),
    .q0(threshs_m_thresholds_46_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_45_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_45_address0),
    .ce0(threshs_m_thresholds_45_ce0),
    .q0(threshs_m_thresholds_45_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_44_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_44_address0),
    .ce0(threshs_m_thresholds_44_ce0),
    .q0(threshs_m_thresholds_44_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_43_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_43_address0),
    .ce0(threshs_m_thresholds_43_ce0),
    .q0(threshs_m_thresholds_43_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_42_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_42_address0),
    .ce0(threshs_m_thresholds_42_ce0),
    .q0(threshs_m_thresholds_42_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_41_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_41_address0),
    .ce0(threshs_m_thresholds_41_ce0),
    .q0(threshs_m_thresholds_41_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_40_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_40_address0),
    .ce0(threshs_m_thresholds_40_ce0),
    .q0(threshs_m_thresholds_40_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_39_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_39_address0),
    .ce0(threshs_m_thresholds_39_ce0),
    .q0(threshs_m_thresholds_39_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_38_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_38_address0),
    .ce0(threshs_m_thresholds_38_ce0),
    .q0(threshs_m_thresholds_38_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_37_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_37_address0),
    .ce0(threshs_m_thresholds_37_ce0),
    .q0(threshs_m_thresholds_37_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_35_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_35_address0),
    .ce0(threshs_m_thresholds_35_ce0),
    .q0(threshs_m_thresholds_35_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_34_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_34_address0),
    .ce0(threshs_m_thresholds_34_ce0),
    .q0(threshs_m_thresholds_34_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_33_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_33_address0),
    .ce0(threshs_m_thresholds_33_ce0),
    .q0(threshs_m_thresholds_33_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_32_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_32_address0),
    .ce0(threshs_m_thresholds_32_ce0),
    .q0(threshs_m_thresholds_32_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_31_address0),
    .ce0(threshs_m_thresholds_31_ce0),
    .q0(threshs_m_thresholds_31_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_30_address0),
    .ce0(threshs_m_thresholds_30_ce0),
    .q0(threshs_m_thresholds_30_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_29_address0),
    .ce0(threshs_m_thresholds_29_ce0),
    .q0(threshs_m_thresholds_29_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_28_address0),
    .ce0(threshs_m_thresholds_28_ce0),
    .q0(threshs_m_thresholds_28_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_27_address0),
    .ce0(threshs_m_thresholds_27_ce0),
    .q0(threshs_m_thresholds_27_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_26_address0),
    .ce0(threshs_m_thresholds_26_ce0),
    .q0(threshs_m_thresholds_26_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_24_address0),
    .ce0(threshs_m_thresholds_24_ce0),
    .q0(threshs_m_thresholds_24_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_23_address0),
    .ce0(threshs_m_thresholds_23_ce0),
    .q0(threshs_m_thresholds_23_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_22_address0),
    .ce0(threshs_m_thresholds_22_ce0),
    .q0(threshs_m_thresholds_22_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_21_address0),
    .ce0(threshs_m_thresholds_21_ce0),
    .q0(threshs_m_thresholds_21_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_20_address0),
    .ce0(threshs_m_thresholds_20_ce0),
    .q0(threshs_m_thresholds_20_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_19_address0),
    .ce0(threshs_m_thresholds_19_ce0),
    .q0(threshs_m_thresholds_19_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_18_address0),
    .ce0(threshs_m_thresholds_18_ce0),
    .q0(threshs_m_thresholds_18_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_17_address0),
    .ce0(threshs_m_thresholds_17_ce0),
    .q0(threshs_m_thresholds_17_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_16_address0),
    .ce0(threshs_m_thresholds_16_ce0),
    .q0(threshs_m_thresholds_16_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_15_address0),
    .ce0(threshs_m_thresholds_15_ce0),
    .q0(threshs_m_thresholds_15_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_13_address0),
    .ce0(threshs_m_thresholds_13_ce0),
    .q0(threshs_m_thresholds_13_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_12_address0),
    .ce0(threshs_m_thresholds_12_ce0),
    .q0(threshs_m_thresholds_12_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_11_address0),
    .ce0(threshs_m_thresholds_11_ce0),
    .q0(threshs_m_thresholds_11_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_10_address0),
    .ce0(threshs_m_thresholds_10_ce0),
    .q0(threshs_m_thresholds_10_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_9_address0),
    .ce0(threshs_m_thresholds_9_ce0),
    .q0(threshs_m_thresholds_9_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_8_address0),
    .ce0(threshs_m_thresholds_8_ce0),
    .q0(threshs_m_thresholds_8_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_7_address0),
    .ce0(threshs_m_thresholds_7_ce0),
    .q0(threshs_m_thresholds_7_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_6_address0),
    .ce0(threshs_m_thresholds_6_ce0),
    .q0(threshs_m_thresholds_6_q0)
);

Thresholding_Batch_0_Thresholding_Batcbkb #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
threshs_m_thresholds_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(threshs_m_thresholds_5_address0),
    .ce0(threshs_m_thresholds_5_ce0),
    .q0(threshs_m_thresholds_5_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln266_fu_1014_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_1003 <= i_fu_1020_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_1003 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln266_fu_1014_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nf_assign_reg_992 <= select_ln280_fu_1575_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nf_assign_reg_992 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln266_fu_1014_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arg_V_read_assign_10_reg_2348 <= {{in_V_V_TDATA[95:88]}};
        arg_V_read_assign_11_reg_2358 <= {{in_V_V_TDATA[103:96]}};
        arg_V_read_assign_12_reg_2368 <= {{in_V_V_TDATA[111:104]}};
        arg_V_read_assign_13_reg_2378 <= {{in_V_V_TDATA[119:112]}};
        arg_V_read_assign_14_reg_2388 <= {{in_V_V_TDATA[127:120]}};
        arg_V_read_assign_15_reg_2398 <= {{in_V_V_TDATA[135:128]}};
        arg_V_read_assign_16_reg_2408 <= {{in_V_V_TDATA[143:136]}};
        arg_V_read_assign_17_reg_2418 <= {{in_V_V_TDATA[151:144]}};
        arg_V_read_assign_18_reg_2428 <= {{in_V_V_TDATA[159:152]}};
        arg_V_read_assign_19_reg_2438 <= {{in_V_V_TDATA[167:160]}};
        arg_V_read_assign_1_reg_2248 <= {{in_V_V_TDATA[15:8]}};
        arg_V_read_assign_20_reg_2448 <= {{in_V_V_TDATA[175:168]}};
        arg_V_read_assign_21_reg_2458 <= {{in_V_V_TDATA[183:176]}};
        arg_V_read_assign_22_reg_2468 <= {{in_V_V_TDATA[191:184]}};
        arg_V_read_assign_23_reg_2478 <= {{in_V_V_TDATA[199:192]}};
        arg_V_read_assign_24_reg_2488 <= {{in_V_V_TDATA[207:200]}};
        arg_V_read_assign_25_reg_2498 <= {{in_V_V_TDATA[215:208]}};
        arg_V_read_assign_26_reg_2508 <= {{in_V_V_TDATA[223:216]}};
        arg_V_read_assign_27_reg_2518 <= {{in_V_V_TDATA[231:224]}};
        arg_V_read_assign_28_reg_2528 <= {{in_V_V_TDATA[239:232]}};
        arg_V_read_assign_29_reg_2538 <= {{in_V_V_TDATA[247:240]}};
        arg_V_read_assign_2_reg_2258 <= {{in_V_V_TDATA[23:16]}};
        arg_V_read_assign_30_reg_2548 <= {{in_V_V_TDATA[255:248]}};
        arg_V_read_assign_31_reg_2558 <= {{in_V_V_TDATA[263:256]}};
        arg_V_read_assign_32_reg_2568 <= {{in_V_V_TDATA[271:264]}};
        arg_V_read_assign_33_reg_2578 <= {{in_V_V_TDATA[279:272]}};
        arg_V_read_assign_34_reg_2588 <= {{in_V_V_TDATA[287:280]}};
        arg_V_read_assign_35_reg_2598 <= {{in_V_V_TDATA[295:288]}};
        arg_V_read_assign_36_reg_2608 <= {{in_V_V_TDATA[303:296]}};
        arg_V_read_assign_37_reg_2618 <= {{in_V_V_TDATA[311:304]}};
        arg_V_read_assign_38_reg_2628 <= {{in_V_V_TDATA[319:312]}};
        arg_V_read_assign_39_reg_2638 <= {{in_V_V_TDATA[327:320]}};
        arg_V_read_assign_3_reg_2268 <= {{in_V_V_TDATA[31:24]}};
        arg_V_read_assign_40_reg_2648 <= {{in_V_V_TDATA[335:328]}};
        arg_V_read_assign_41_reg_2658 <= {{in_V_V_TDATA[343:336]}};
        arg_V_read_assign_42_reg_2668 <= {{in_V_V_TDATA[351:344]}};
        arg_V_read_assign_43_reg_2678 <= {{in_V_V_TDATA[359:352]}};
        arg_V_read_assign_44_reg_2688 <= {{in_V_V_TDATA[367:360]}};
        arg_V_read_assign_45_reg_2698 <= {{in_V_V_TDATA[375:368]}};
        arg_V_read_assign_46_reg_2708 <= {{in_V_V_TDATA[383:376]}};
        arg_V_read_assign_47_reg_2718 <= {{in_V_V_TDATA[391:384]}};
        arg_V_read_assign_4_reg_2278 <= {{in_V_V_TDATA[39:32]}};
        arg_V_read_assign_5_reg_2288 <= {{in_V_V_TDATA[47:40]}};
        arg_V_read_assign_6_reg_2298 <= {{in_V_V_TDATA[55:48]}};
        arg_V_read_assign_7_reg_2308 <= {{in_V_V_TDATA[63:56]}};
        arg_V_read_assign_8_reg_2318 <= {{in_V_V_TDATA[71:64]}};
        arg_V_read_assign_9_reg_2328 <= {{in_V_V_TDATA[79:72]}};
        arg_V_read_assign_s_reg_2338 <= {{in_V_V_TDATA[87:80]}};
        trunc_ln647_reg_2238 <= trunc_ln647_fu_1026_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln266_reg_2229 <= icmp_ln266_fu_1014_p2;
    end
end

always @ (*) begin
    if ((icmp_ln266_fu_1014_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln266_fu_1014_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TDATA_blk_n = in_V_V_TVALID;
    end else begin
        in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln266_fu_1014_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_TREADY = 1'b1;
    end else begin
        in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln266_reg_2229 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TDATA_blk_n = out_V_V_TREADY;
    end else begin
        out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln266_reg_2229 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_V_TVALID = 1'b1;
    end else begin
        out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_10_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_11_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_12_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_13_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_14_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_15_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_16_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_17_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_18_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_19_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_1_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_20_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_21_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_22_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_23_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_24_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_25_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_26_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_27_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_28_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_29_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_2_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_30_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_31_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_32_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_33_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_34_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_35_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_36_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_37_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_38_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_39_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_3_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_40_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_41_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_42_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_43_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_44_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_45_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_46_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_47_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_48_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_4_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_5_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_6_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_7_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_8_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_9_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        threshs_m_thresholds_ce0 = 1'b1;
    end else begin
        threshs_m_thresholds_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln266_fu_1014_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln266_fu_1014_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln266_fu_1014_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln266_fu_1014_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((icmp_ln266_fu_1014_p2 == 1'd0) & (in_V_V_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln266_fu_1014_p2 == 1'd0) & (in_V_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln266_reg_2229 == 1'd0) & (out_V_V_TREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_1020_p2 = (i_0_reg_1003 + 5'd1);

assign icmp_ln266_fu_1014_p2 = ((i_0_reg_1003 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_1569_p2 = ((nf_fu_1563_p2 == 32'd16) ? 1'b1 : 1'b0);

assign icmp_ln899_10_fu_1693_p2 = ((arg_V_read_assign_s_reg_2338 < threshs_m_thresholds_46_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_11_fu_1704_p2 = ((arg_V_read_assign_10_reg_2348 < threshs_m_thresholds_45_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_12_fu_1715_p2 = ((arg_V_read_assign_11_reg_2358 < threshs_m_thresholds_44_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_13_fu_1726_p2 = ((arg_V_read_assign_12_reg_2368 < threshs_m_thresholds_43_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_14_fu_1737_p2 = ((arg_V_read_assign_13_reg_2378 < threshs_m_thresholds_42_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_15_fu_1748_p2 = ((arg_V_read_assign_14_reg_2388 < threshs_m_thresholds_41_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_16_fu_1759_p2 = ((arg_V_read_assign_15_reg_2398 < threshs_m_thresholds_40_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_17_fu_1770_p2 = ((arg_V_read_assign_16_reg_2408 < threshs_m_thresholds_39_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_18_fu_1781_p2 = ((arg_V_read_assign_17_reg_2418 < threshs_m_thresholds_38_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_19_fu_1792_p2 = ((arg_V_read_assign_18_reg_2428 < threshs_m_thresholds_37_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_1594_p2 = ((arg_V_read_assign_1_reg_2248 < threshs_m_thresholds_47_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_20_fu_1803_p2 = ((arg_V_read_assign_19_reg_2438 < threshs_m_thresholds_35_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_21_fu_1814_p2 = ((arg_V_read_assign_20_reg_2448 < threshs_m_thresholds_34_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_22_fu_1825_p2 = ((arg_V_read_assign_21_reg_2458 < threshs_m_thresholds_33_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_23_fu_1836_p2 = ((arg_V_read_assign_22_reg_2468 < threshs_m_thresholds_32_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_24_fu_1847_p2 = ((arg_V_read_assign_23_reg_2478 < threshs_m_thresholds_31_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_25_fu_1858_p2 = ((arg_V_read_assign_24_reg_2488 < threshs_m_thresholds_30_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_26_fu_1869_p2 = ((arg_V_read_assign_25_reg_2498 < threshs_m_thresholds_29_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_27_fu_1880_p2 = ((arg_V_read_assign_26_reg_2508 < threshs_m_thresholds_28_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_28_fu_1891_p2 = ((arg_V_read_assign_27_reg_2518 < threshs_m_thresholds_27_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_29_fu_1902_p2 = ((arg_V_read_assign_28_reg_2528 < threshs_m_thresholds_26_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_2_fu_1605_p2 = ((arg_V_read_assign_2_reg_2258 < threshs_m_thresholds_36_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_30_fu_1913_p2 = ((arg_V_read_assign_29_reg_2538 < threshs_m_thresholds_24_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_31_fu_1924_p2 = ((arg_V_read_assign_30_reg_2548 < threshs_m_thresholds_23_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_32_fu_1935_p2 = ((arg_V_read_assign_31_reg_2558 < threshs_m_thresholds_22_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_33_fu_1946_p2 = ((arg_V_read_assign_32_reg_2568 < threshs_m_thresholds_21_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_34_fu_1957_p2 = ((arg_V_read_assign_33_reg_2578 < threshs_m_thresholds_20_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_35_fu_1968_p2 = ((arg_V_read_assign_34_reg_2588 < threshs_m_thresholds_19_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_36_fu_1979_p2 = ((arg_V_read_assign_35_reg_2598 < threshs_m_thresholds_18_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_37_fu_1990_p2 = ((arg_V_read_assign_36_reg_2608 < threshs_m_thresholds_17_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_38_fu_2001_p2 = ((arg_V_read_assign_37_reg_2618 < threshs_m_thresholds_16_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_39_fu_2012_p2 = ((arg_V_read_assign_38_reg_2628 < threshs_m_thresholds_15_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_3_fu_1616_p2 = ((arg_V_read_assign_3_reg_2268 < threshs_m_thresholds_25_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_40_fu_2023_p2 = ((arg_V_read_assign_39_reg_2638 < threshs_m_thresholds_13_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_41_fu_2034_p2 = ((arg_V_read_assign_40_reg_2648 < threshs_m_thresholds_12_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_42_fu_2045_p2 = ((arg_V_read_assign_41_reg_2658 < threshs_m_thresholds_11_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_43_fu_2056_p2 = ((arg_V_read_assign_42_reg_2668 < threshs_m_thresholds_10_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_44_fu_2067_p2 = ((arg_V_read_assign_43_reg_2678 < threshs_m_thresholds_9_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_45_fu_2078_p2 = ((arg_V_read_assign_44_reg_2688 < threshs_m_thresholds_8_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_46_fu_2089_p2 = ((arg_V_read_assign_45_reg_2698 < threshs_m_thresholds_7_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_47_fu_2100_p2 = ((arg_V_read_assign_46_reg_2708 < threshs_m_thresholds_6_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_48_fu_2111_p2 = ((arg_V_read_assign_47_reg_2718 < threshs_m_thresholds_5_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_4_fu_1627_p2 = ((arg_V_read_assign_4_reg_2278 < threshs_m_thresholds_14_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_5_fu_1638_p2 = ((arg_V_read_assign_5_reg_2288 < threshs_m_thresholds_4_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_6_fu_1649_p2 = ((arg_V_read_assign_6_reg_2298 < threshs_m_thresholds_3_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_7_fu_1660_p2 = ((arg_V_read_assign_7_reg_2308 < threshs_m_thresholds_2_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_8_fu_1671_p2 = ((arg_V_read_assign_8_reg_2318 < threshs_m_thresholds_1_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_9_fu_1682_p2 = ((arg_V_read_assign_9_reg_2328 < threshs_m_thresholds_q0) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_1583_p2 = ((trunc_ln647_reg_2238 < threshs_m_thresholds_48_q0) ? 1'b1 : 1'b0);

assign nf_fu_1563_p2 = (32'd1 + nf_assign_reg_992);

assign out_V_V_TDATA = tmp_V_fu_2122_p50;

assign select_ln280_fu_1575_p3 = ((icmp_ln280_fu_1569_p2[0:0] === 1'b1) ? 32'd0 : nf_fu_1563_p2);

assign threshs_m_thresholds_10_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_11_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_12_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_13_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_14_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_15_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_16_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_17_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_18_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_19_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_1_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_20_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_21_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_22_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_23_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_24_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_25_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_26_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_27_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_28_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_29_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_2_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_30_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_31_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_32_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_33_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_34_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_35_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_36_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_37_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_38_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_39_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_3_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_40_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_41_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_42_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_43_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_44_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_45_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_46_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_47_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_48_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_4_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_5_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_6_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_7_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_8_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_9_address0 = zext_ln186_fu_1030_p1;

assign threshs_m_thresholds_address0 = zext_ln186_fu_1030_p1;

assign tmp_V_fu_2122_p50 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{xor_ln899_48_fu_2116_p2}, {xor_ln899_47_fu_2105_p2}}, {xor_ln899_46_fu_2094_p2}}, {xor_ln899_45_fu_2083_p2}}, {xor_ln899_44_fu_2072_p2}}, {xor_ln899_43_fu_2061_p2}}, {xor_ln899_42_fu_2050_p2}}, {xor_ln899_41_fu_2039_p2}}, {xor_ln899_40_fu_2028_p2}}, {xor_ln899_39_fu_2017_p2}}, {xor_ln899_38_fu_2006_p2}}, {xor_ln899_37_fu_1995_p2}}, {xor_ln899_36_fu_1984_p2}}, {xor_ln899_35_fu_1973_p2}}, {xor_ln899_34_fu_1962_p2}}, {xor_ln899_33_fu_1951_p2}}, {xor_ln899_32_fu_1940_p2}}, {xor_ln899_31_fu_1929_p2}}, {xor_ln899_30_fu_1918_p2}}, {xor_ln899_29_fu_1907_p2}}, {xor_ln899_28_fu_1896_p2}}, {xor_ln899_27_fu_1885_p2}}, {xor_ln899_26_fu_1874_p2}}, {xor_ln899_25_fu_1863_p2}}, {xor_ln899_24_fu_1852_p2}}, {xor_ln899_23_fu_1841_p2}}, {xor_ln899_22_fu_1830_p2}}, {xor_ln899_21_fu_1819_p2}}, {xor_ln899_20_fu_1808_p2}}, {xor_ln899_19_fu_1797_p2}}, {xor_ln899_18_fu_1786_p2}}, {xor_ln899_17_fu_1775_p2}}, {xor_ln899_16_fu_1764_p2}}, {xor_ln899_15_fu_1753_p2}}, {xor_ln899_14_fu_1742_p2}}, {xor_ln899_13_fu_1731_p2}}, {xor_ln899_12_fu_1720_p2}}, {xor_ln899_11_fu_1709_p2}}, {xor_ln899_10_fu_1698_p2}}, {xor_ln899_9_fu_1687_p2}}, {xor_ln899_8_fu_1676_p2}}, {xor_ln899_7_fu_1665_p2}}, {xor_ln899_6_fu_1654_p2}}, {xor_ln899_5_fu_1643_p2}}, {xor_ln899_4_fu_1632_p2}}, {xor_ln899_3_fu_1621_p2}}, {xor_ln899_2_fu_1610_p2}}, {xor_ln899_1_fu_1599_p2}}, {xor_ln899_fu_1588_p2}};

assign trunc_ln647_fu_1026_p1 = in_V_V_TDATA[7:0];

assign xor_ln899_10_fu_1698_p2 = (icmp_ln899_10_fu_1693_p2 ^ 1'd1);

assign xor_ln899_11_fu_1709_p2 = (icmp_ln899_11_fu_1704_p2 ^ 1'd1);

assign xor_ln899_12_fu_1720_p2 = (icmp_ln899_12_fu_1715_p2 ^ 1'd1);

assign xor_ln899_13_fu_1731_p2 = (icmp_ln899_13_fu_1726_p2 ^ 1'd1);

assign xor_ln899_14_fu_1742_p2 = (icmp_ln899_14_fu_1737_p2 ^ 1'd1);

assign xor_ln899_15_fu_1753_p2 = (icmp_ln899_15_fu_1748_p2 ^ 1'd1);

assign xor_ln899_16_fu_1764_p2 = (icmp_ln899_16_fu_1759_p2 ^ 1'd1);

assign xor_ln899_17_fu_1775_p2 = (icmp_ln899_17_fu_1770_p2 ^ 1'd1);

assign xor_ln899_18_fu_1786_p2 = (icmp_ln899_18_fu_1781_p2 ^ 1'd1);

assign xor_ln899_19_fu_1797_p2 = (icmp_ln899_19_fu_1792_p2 ^ 1'd1);

assign xor_ln899_1_fu_1599_p2 = (icmp_ln899_1_fu_1594_p2 ^ 1'd1);

assign xor_ln899_20_fu_1808_p2 = (icmp_ln899_20_fu_1803_p2 ^ 1'd1);

assign xor_ln899_21_fu_1819_p2 = (icmp_ln899_21_fu_1814_p2 ^ 1'd1);

assign xor_ln899_22_fu_1830_p2 = (icmp_ln899_22_fu_1825_p2 ^ 1'd1);

assign xor_ln899_23_fu_1841_p2 = (icmp_ln899_23_fu_1836_p2 ^ 1'd1);

assign xor_ln899_24_fu_1852_p2 = (icmp_ln899_24_fu_1847_p2 ^ 1'd1);

assign xor_ln899_25_fu_1863_p2 = (icmp_ln899_25_fu_1858_p2 ^ 1'd1);

assign xor_ln899_26_fu_1874_p2 = (icmp_ln899_26_fu_1869_p2 ^ 1'd1);

assign xor_ln899_27_fu_1885_p2 = (icmp_ln899_27_fu_1880_p2 ^ 1'd1);

assign xor_ln899_28_fu_1896_p2 = (icmp_ln899_28_fu_1891_p2 ^ 1'd1);

assign xor_ln899_29_fu_1907_p2 = (icmp_ln899_29_fu_1902_p2 ^ 1'd1);

assign xor_ln899_2_fu_1610_p2 = (icmp_ln899_2_fu_1605_p2 ^ 1'd1);

assign xor_ln899_30_fu_1918_p2 = (icmp_ln899_30_fu_1913_p2 ^ 1'd1);

assign xor_ln899_31_fu_1929_p2 = (icmp_ln899_31_fu_1924_p2 ^ 1'd1);

assign xor_ln899_32_fu_1940_p2 = (icmp_ln899_32_fu_1935_p2 ^ 1'd1);

assign xor_ln899_33_fu_1951_p2 = (icmp_ln899_33_fu_1946_p2 ^ 1'd1);

assign xor_ln899_34_fu_1962_p2 = (icmp_ln899_34_fu_1957_p2 ^ 1'd1);

assign xor_ln899_35_fu_1973_p2 = (icmp_ln899_35_fu_1968_p2 ^ 1'd1);

assign xor_ln899_36_fu_1984_p2 = (icmp_ln899_36_fu_1979_p2 ^ 1'd1);

assign xor_ln899_37_fu_1995_p2 = (icmp_ln899_37_fu_1990_p2 ^ 1'd1);

assign xor_ln899_38_fu_2006_p2 = (icmp_ln899_38_fu_2001_p2 ^ 1'd1);

assign xor_ln899_39_fu_2017_p2 = (icmp_ln899_39_fu_2012_p2 ^ 1'd1);

assign xor_ln899_3_fu_1621_p2 = (icmp_ln899_3_fu_1616_p2 ^ 1'd1);

assign xor_ln899_40_fu_2028_p2 = (icmp_ln899_40_fu_2023_p2 ^ 1'd1);

assign xor_ln899_41_fu_2039_p2 = (icmp_ln899_41_fu_2034_p2 ^ 1'd1);

assign xor_ln899_42_fu_2050_p2 = (icmp_ln899_42_fu_2045_p2 ^ 1'd1);

assign xor_ln899_43_fu_2061_p2 = (icmp_ln899_43_fu_2056_p2 ^ 1'd1);

assign xor_ln899_44_fu_2072_p2 = (icmp_ln899_44_fu_2067_p2 ^ 1'd1);

assign xor_ln899_45_fu_2083_p2 = (icmp_ln899_45_fu_2078_p2 ^ 1'd1);

assign xor_ln899_46_fu_2094_p2 = (icmp_ln899_46_fu_2089_p2 ^ 1'd1);

assign xor_ln899_47_fu_2105_p2 = (icmp_ln899_47_fu_2100_p2 ^ 1'd1);

assign xor_ln899_48_fu_2116_p2 = (icmp_ln899_48_fu_2111_p2 ^ 1'd1);

assign xor_ln899_4_fu_1632_p2 = (icmp_ln899_4_fu_1627_p2 ^ 1'd1);

assign xor_ln899_5_fu_1643_p2 = (icmp_ln899_5_fu_1638_p2 ^ 1'd1);

assign xor_ln899_6_fu_1654_p2 = (icmp_ln899_6_fu_1649_p2 ^ 1'd1);

assign xor_ln899_7_fu_1665_p2 = (icmp_ln899_7_fu_1660_p2 ^ 1'd1);

assign xor_ln899_8_fu_1676_p2 = (icmp_ln899_8_fu_1671_p2 ^ 1'd1);

assign xor_ln899_9_fu_1687_p2 = (icmp_ln899_9_fu_1682_p2 ^ 1'd1);

assign xor_ln899_fu_1588_p2 = (icmp_ln899_fu_1583_p2 ^ 1'd1);

assign zext_ln186_fu_1030_p1 = nf_assign_reg_992;

endmodule //Thresholding_Batch_0_Thresholding_Batch
